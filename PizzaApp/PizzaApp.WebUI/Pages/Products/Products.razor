@page "/products"
@using PizzaApp.WebUI.Models;
@inject HttpClient Http
@inject NavigationManager NavManager

<div class="flex flex-row justify-content-between">
    <p style="font-size: 30px">Products</p>
    <button class="btn btn-primary" @onclick="@(() => { NavManager.NavigateTo("/products/create"); })">Create product</button>
</div>

<div class="row">
    @if (showLoadingMessage)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (products.Count == 0)
        {
            <div class="col-12">
                <p class="text-muted">No products found. Still loading...</p>
            </div>
        }
        else
        {
            @foreach (var product in products)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <img src="https://images.unsplash.com/photo-1604382354936-07c5d9983bd3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxleHBsb3JlLWZlZWR8Nnx8fGVufDB8fHx8fA%3D%3D&w=1000&q=80" class="card-img-top" alt="@product.Name">
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            @* <p class="card-text">@product.Description</p> *@
                            <p class="card-text">Price: @product.Price LEI</p>
                            <p class="card-text">Category: @product.Category</p>
                            <button class="btn btn-secondary" @onclick="@(() => { NavManager.NavigateTo($"/products/{product.Id}");})">View More</button>
                            <button class="btn btn-danger" @onclick="@(async () => await DeleteCurrentProductAsync(product.Id))">Delete</button>
                        </div>
                    </div>
                </div>
            }
        } 
    }
</div>

@code {
    private List<ProductResponseModel> products = new List<ProductResponseModel>();
    private bool showLoadingMessage = true;
    
    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<ProductResponseModel>>("products?orderBy=createdAt");
        showLoadingMessage = false;
    }

    private async Task DeleteCurrentProductAsync(int productId)
    {
        showLoadingMessage = true;
        await Http.DeleteAsync($"products/{productId}");

        // CLIENT
        // var productToBeRemoved = products.Where(x => x.Id == productId).First();
        //
        // products.Remove(productToBeRemoved);
        
        // SERVER
        products = await Http.GetFromJsonAsync<List<ProductResponseModel>>("products");

        showLoadingMessage = false;
    }
}
